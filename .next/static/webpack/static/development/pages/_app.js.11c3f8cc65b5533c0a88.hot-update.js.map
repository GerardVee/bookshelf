{"version":3,"file":"static/webpack/static/development/pages/_app.js.11c3f8cc65b5533c0a88.hot-update.js","sources":["webpack:///./ducks/actions.js"],"sourcesContent":["import 'isomorphic-fetch';\r\nimport Router from 'next/router';\r\n\r\nimport { post, patch, deleteR, get } from '../utils/methods';\r\n\r\nexport const actionTypes =\r\n{\r\n    LOGIN_USER: 'BOOKSHELF_LOGIN_USER',\r\n    SIGN_UP_USER: 'BOOKSHELF_SIGN_UP_USER',\r\n    LOGOUT_USER: 'BOOKSHELF_LOGOUT_USER',\r\n    RECEIVE_POSTS: 'BOOKSHELF_RECEIVE_POSTS',\r\n    RECEIVE_FEED: 'BOOKSHELF_RECEIVE_FEED',\r\n    UPDATE_USER: 'BOOKSHELF_UPDATE_USER',\r\n    UPDATE_PROFILE_PICTURE: 'BOOKSHELF_UPDATE_PROFILE_PICTURE',\r\n    FOLLOW_USER: 'BOOKSHELF_FOLLOW_USER',\r\n    UNFOLLOW_USER: 'BOOKSHELF_UNFOLLOW_USER',\r\n    SELECT_CURRENT_BOOK: 'BOOKSHELF_SELECT_CURRENT_BOOK',\r\n    APPEND_READ_BOOK: 'BOOKSHELF_APPEND_READ_BOOK',\r\n    DELETE_READ_BOOK: 'BOOKSHELF_DELETE_READ_BOOK',\r\n    APPEND_WILL_READ_BOOK: 'BOOKSHELF_APPEND_WILL_READ_BOOK',\r\n    DELETE_WILL_READ_BOOK: 'BOOKSHELF_DELETE_WILL_READ_BOOK',\r\n    CREATE_POST: 'BOOKSHELF_CREATE_POST',\r\n    LIKE_POST: 'BOOKSHELF_LIKE_POST',\r\n    UNLIKE_POST: 'BOOKSHELF_UNLIKE_POST',\r\n    DELETE_POST: 'BOOKSHELF_DELETE_POST',\r\n    RECEIVE_ERROR: 'BOOKSHELF_RECEIVE_ERROR',\r\n    RECEIVE_WARNING: 'BOOKSHELF_RECEIVE_WARNING',\r\n    RECEIVE_SUCCESS: 'BOOKSHELF_RECEIVE_SUCCESS',\r\n    CLEAR_STATUS: 'BOOKSHELF_CLEAR_STATUS',\r\n};\r\n\r\nexport const loginUser = (userInfo) => dispatch => dispatch({ type: actionTypes.LOGIN_USER, userInfo });\r\nexport const signUpUser = (userInfo) => dispatch => dispatch({ type: actionTypes.SIGN_UP_USER, userInfo });\r\nexport const logoutUser = () => dispatch => dispatch({ type: actionTypes.LOGOUT_USER });\r\nexport const receivePosts = (posts) => dispatch => dispatch({ type: actionTypes.RECEIVE_POSTS, posts });\r\nexport const receiveFeed = (feed) => dispatch => dispatch({ type: actionTypes.RECEIVE_FEED, feed });\r\nexport const updateUser = (user) => dispatch => dispatch({ type: actionTypes.UPDATE_USER, user });\r\nexport const updateProfilePhoto = ({ url }) => dispatch => dispatch({ type: actionTypes.UPDATE_PROFILE_PICTURE, url });\r\nexport const followAUser = ({ user }) => dispatch => dispatch({ type: actionTypes.FOLLOW_USER, user })\r\nexport const unfollowAUser = ({ index }) => dispatch => dispatch({ type: actionTypes.UNFOLLOW_USER, index })\r\nexport const selectCurrentBook = (book) => dispatch => dispatch({ type: actionTypes.SELECT_CURRENT_BOOK, book });\r\nexport const appendReadBook = (book) => dispatch => dispatch({ type: actionTypes.APPEND_READ_BOOK, book });\r\nexport const deleteReadBook = (index) => dispatch => dispatch({ type: actionTypes.DELETE_READ_BOOK, index });\r\nexport const appendWillReadBook = (book) => dispatch => dispatch({ type: actionTypes.APPEND_WILL_READ_BOOK, book });\r\nexport const deleteWillReadBook = (index) => dispatch => dispatch({ type: actionTypes.DELETE_WILL_READ_BOOK, index });\r\nexport const createAPost = (post) => dispatch => dispatch({ type: actionTypes.CREATE_POST, post });\r\nexport const likeAPost = ({ post_id }) => dispatch => dispatch({ type: actionTypes.LIKE_POST, post_id });\r\nexport const unlikeAPost = ({ post_id }) => dispatch => dispatch({ type: actionTypes.UNLIKE_POST, post_id });\r\nexport const deleteAPost = ({ post_id }) => dispatch => dispatch({ type: actionTypes.DELETE_POST, post_id });\r\nexport const receiveError = (error) => dispatch => dispatch({ type: actionTypes.RECEIVE_ERROR, error });\r\nexport const receiveWarning = (warning) => dispatch => dispatch({ type: actionTypes.RECEIVE_WARNING, warning });\r\nexport const receiveSuccess = (success) => dispatch => dispatch({ type: actionTypes.RECEIVE_SUCCESS, success });\r\nexport const clearStatus = () => dispatch => dispatch({ type: actionTypes.CLEAR_STATUS });\r\n\r\nexport const request = (dispatch, url, options, successMsg = '', errorMsg = '', action, includeResult = true, includeDispatch = true) =>\r\n{\r\n    fetch(url, options).\r\n        then(res =>\r\n        {\r\n            if (!res.ok)\r\n            {\r\n                throw Error(res.statusText);\r\n            }\r\n            return res;\r\n        })\r\n        .then(res => res.json())\r\n        .then(result =>\r\n        {\r\n            if (result !== null && typeof result === 'object')\r\n            {\r\n                if (result.errorMsg || result.code)\r\n                {\r\n                    dispatch(receiveError(errorMsg));\r\n                    return;\r\n                }\r\n                if (successMsg !== '')\r\n                {\r\n                    dispatch(receiveSuccess(successMsg));\r\n                }\r\n                if (includeResult)\r\n                {\r\n                    if (includeDispatch)\r\n                    {\r\n                        dispatch(action(result));\r\n                    }\r\n                    else\r\n                    {\r\n                        action(result);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    dispatch(action());\r\n                }\r\n            }\r\n            else if (typeof result === 'string')\r\n            {\r\n                dispatch(receiveError(result));\r\n                throw Error(result);\r\n            }\r\n            else\r\n            {\r\n                if (errorMsg != '')\r\n                {\r\n                    dispatch(receiveError(errorMsg));\r\n                    throw Error(errorMsg);\r\n                }\r\n            }\r\n        })\r\n        .catch((text) =>\r\n        {\r\n            console.log(text);\r\n        });\r\n};\r\n\r\nexport const createPost = ({ user_id, utoken, status, about, aboutType, book_id }, callback) => dispatch =>\r\n{\r\n    fetch('https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/post', post({ user_id, utoken, status, about, aboutType, book_id })).\r\n        then(res =>\r\n        {\r\n            if (!res.ok)\r\n            {\r\n                throw Error(res.statusText);\r\n            }\r\n            return res;\r\n        })\r\n        .then(res => res.json())\r\n        .then(result =>\r\n        {\r\n            if (result !== null && typeof result === 'object')\r\n            {\r\n                if (result.errorMsg)\r\n                {\r\n                    dispatch(receiveError(errorMsg));\r\n                    return;\r\n                }\r\n                dispatch(receiveSuccess('Status posted'));\r\n                dispatch(createAPost(result));\r\n                callback();\r\n            }\r\n            else if (typeof result === 'string')\r\n            {\r\n                dispatch(receiveError(result));\r\n                throw Error(result);\r\n            }\r\n            else\r\n            {\r\n                dispatch(receiveError('Could not post status'));\r\n                throw Error('Could not post status');\r\n            }\r\n        })\r\n        .catch((text) =>\r\n        {\r\n            console.log(text);\r\n        });\r\n};\r\n\r\nexport const fetchFeed = ({ username, user_id, utoken }, mPosts, profile_picture) => async dispatch =>\r\n{\r\n    try\r\n    {\r\n        const response = await fetch('https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/posts/following', post({ username, user_id, utoken }));\r\n        const followingFeed = await response.json();\r\n        if (typeof followingFeed === 'object')\r\n        {\r\n            if (followingFeed.errorMsg)\r\n            {\r\n                dispatch(receiveError('Failed to fetch feed'));\r\n                return;\r\n            }\r\n            if (mPosts.length > 0)\r\n            {\r\n                const mposts = mPosts.map(p => ({ ...p, profile_picture }));\r\n                const feed = mposts.concat(followingFeed).sort((a, b) => b.date - a.date);\r\n                dispatch(receiveFeed(feed));\r\n                return;\r\n            }\r\n            const res = await fetch('https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/posts/user', post({ username, user_id, utoken }))\r\n            const myPosts = await res.json();\r\n            if (typeof myPosts === 'object')\r\n            {\r\n                if (myPosts.errorMsg)\r\n                {\r\n                    dispatch(receiveError('Failed to fetch posts'));\r\n                    return;\r\n                }\r\n                const mposts = myPosts.map(p => ({ ...p, profile_picture }));\r\n                const feed = mposts.concat(followingFeed).sort((a, b) => b.date - a.date);\r\n                dispatch(receiveFeed(feed));\r\n                return;\r\n            }\r\n            else if (typeof myPosts === 'string')\r\n            {\r\n                dispatch(receiveError(myPosts));\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                dispatch(receiveError('Could not fetch feed'));\r\n                return;\r\n            }\r\n        }\r\n        else if (typeof result === 'string')\r\n        {\r\n            dispatch(receiveError(result));\r\n            throw Error(result);\r\n        }\r\n        else\r\n        {\r\n            dispatch(receiveError('Could not fetch feed'));\r\n            throw Error('Could not fetch feed');\r\n        }\r\n    } catch (e)\r\n    {\r\n        console.log(e);\r\n    }\r\n};\r\n\r\nexport const signup = ({ username, password, name }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/signup', post({ username, password, name }),\r\n        'Signup success', 'Signup failed', signUpUser, true);\r\n};\r\n\r\nexport const login = ({ username, password }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/login', post({ username, password }),\r\n        'Login success', 'Login failed', loginUser, true);\r\n};\r\n\r\nexport const logout = ({ user_id, utoken }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/logout', post({ user_id, utoken }),\r\n        'Logged out', 'Logout failed', (_) =>\r\n        {\r\n            dispatch(logoutUser());\r\n            localStorage.removeItem('bookshelf-user-state');\r\n            Router.push('/login');\r\n        }, true, false);\r\n};\r\n\r\nexport const getSignedUrl = ({ user_id, utoken, filename, filetype }, callback) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/profile-picture-signed-url', post({ user_id, utoken, filename, filetype }),\r\n        'Uploading image', 'Image upload failed', callback, true, false);\r\n}\r\n\r\nexport const receiveMyPosts = ({ username, user_id, utoken }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/posts/user', post({ username, user_id, utoken }),\r\n        'Posts fetched', 'Posts failed to fetch', receivePosts, true);\r\n};\r\n\r\nexport const updateProfile = ({ user_id, utoken, name, about }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/update', patch({ user_id, utoken, name, about }),\r\n        'Profile updated', 'Profile failed to update', updateUser, true);\r\n};\r\n\r\nexport const updateProfilePicture = ({ user_id, utoken, profile_picture, url }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/profile-picture', patch({ user_id, utoken, profile_picture, url }),\r\n        'Profile picture updated', 'Profile picture failed to update', updateProfilePhoto, true);\r\n};\r\n\r\nexport const followUser = ({ user_id, utoken, user }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/follow', post({ user_id, utoken, user }),\r\n        'Followed ' + user, 'Could not follow ' + user, followAUser, true);\r\n};\r\n\r\nexport const unfollowUser = ({ user_id, utoken, user }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/unfollow', patch({ user_id, utoken, user }),\r\n        'Unfollowed ' + user, 'Could not unfollow ' + user, unfollowAUser, true);\r\n};\r\n\r\nexport const selectReadingBook = ({ user_id, utoken, book }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/book/reading', patch({ user_id, utoken, book }),\r\n        'Reading book updated', 'Reading book update failed', selectCurrentBook, true);\r\n};\r\n\r\nexport const selectReadBook = ({ user_id, utoken, book }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/book/have-read', post({ user_id, utoken, book }),\r\n        'Read book added', 'Read book addition failed', appendReadBook, true);\r\n};\r\n\r\nexport const removeReadBook = ({ user_id, utoken, index }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/book/have-read', deleteR({ user_id, utoken, index }),\r\n        'Read book deleted', 'Read book deletion failed', deleteReadBook, true);\r\n};\r\n\r\nexport const selectWillReadBook = ({ user_id, utoken, book }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/book/will-read', post({ user_id, utoken, book }),\r\n        `Will read book added`, 'Will read book addition failed', appendWillReadBook, true);\r\n};\r\n\r\nexport const removeWillReadBook = ({ user_id, utoken, index }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/user/book/will-read', deleteR({ user_id, utoken, index }),\r\n        'Will read book deleted', 'Will read book deletion failed', deleteWillReadBook, true);\r\n};\r\n\r\nexport const likePost = ({ user_id, utoken, post_id }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/posts/like', post({ user_id, utoken, post_id }),\r\n        'Post liked', 'Post like failed', likeAPost, true);\r\n};\r\n\r\nexport const unlikePost = ({ user_id, utoken, post_id }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/posts/like', deleteR({ user_id, utoken, post_id }),\r\n        'Post unliked', 'Post unlike failed', unlikeAPost, true);\r\n};\r\n\r\nexport const deletePost = ({ user_id, utoken, post_id }) => dispatch =>\r\n{\r\n    request(dispatch, 'https://78g40e4ff5.execute-api.us-east-1.amazonaws.com/prod/bookshelf/post', deleteR({ user_id, utoken, post_id }),\r\n        'Post deleted', 'Post deletion failed', deleteAPost, true);\r\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyxCA;AA0CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AALA;AAIA;AAJA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AASA;AAVA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAjBA;AACA;AADA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AACA;AArBA;AAoBA;AApBA;AAAA;AACA;AADA;AAqBA;AACA;AAtBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAyBA;AA1BA;AACA;AADA;AA6BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AA/BA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAmCA;AApCA;AACA;AADA;AAyCA;AAzCA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AA8CA;AA/CA;AACA;AADA;AAoDA;AApDA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAyDA;AACA;AA1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6DA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAJA;;;;A","sourceRoot":""}